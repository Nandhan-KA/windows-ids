"use client"

import { useState } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Card, CardContent } from "@/components/ui/card"
import { AlertTriangle, CheckCircle, Play, ShieldAlert, XCircle } from "lucide-react"
import { useToast } from "@/components/ui/use-toast"

// Mock data for vulnerabilities
const vulnerabilities = [
  {
    id: 1,
    name: "CVE-2023-1234",
    component: "Windows SMB Service",
    severity: "critical",
    status: "unpatched",
    description: "Remote code execution vulnerability in SMB service",
    remediation: "Install latest Windows security updates",
  },
  {
    id: 2,
    name: "CVE-2023-5678",
    component: "OpenSSL",
    severity: "high",
    status: "unpatched",
    description: "Buffer overflow vulnerability in OpenSSL library",
    remediation: "Update OpenSSL to version 1.1.1t or later",
  },
  {
    id: 3,
    name: "CVE-2023-9012",
    component: "Apache HTTP Server",
    severity: "medium",
    status: "patched",
    description: "Denial of service vulnerability in Apache HTTP Server",
    remediation: "Update to Apache HTTP Server 2.4.56 or later",
  },
  {
    id: 4,
    name: "CVE-2022-7654",
    component: "Java Runtime Environment",
    severity: "high",
    status: "unpatched",
    description: "Privilege escalation vulnerability in JRE",
    remediation: "Update Java to the latest version",
  },
  {
    id: 5,
    name: "CVE-2023-3210",
    component: "Chrome Browser",
    severity: "medium",
    status: "patched",
    description: "Cross-site scripting vulnerability in Chrome",
    remediation: "Update Chrome to the latest version",
  },
]

const severityColors = {
  low: "bg-blue-500/10 text-blue-500 border-blue-500/20",
  medium: "bg-amber-500/10 text-amber-500 border-amber-500/20",
  high: "bg-orange-500/10 text-orange-500 border-orange-500/20",
  critical: "bg-red-500/10 text-red-500 border-red-500/20",
}

const statusColors = {
  patched: "bg-green-500/10 text-green-500 border-green-500/20",
  unpatched: "bg-red-500/10 text-red-500 border-red-500/20",
  mitigated: "bg-amber-500/10 text-amber-500 border-amber-500/20",
}

export default function VulnerabilityScanner() {
  const [scanning, setScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [expandedVulnerability, setExpandedVulnerability] = useState<number | null>(null)
  const { toast } = useToast()

  const startScan = () => {
    setScanning(true)
    setScanProgress(0)

    const interval = setInterval(() => {
      setScanProgress((prev) => {
        const newProgress = prev + Math.floor(Math.random() * 5) + 1
        if (newProgress >= 100) {
          clearInterval(interval)
          setScanning(false)
          toast({
            title: "Vulnerability scan complete",
            description: "Found 5 vulnerabilities in your system.",
          })
          return 100
        }
        return newProgress
      })
    }, 200)
  }

  const toggleExpand = (id: number) => {
    if (expandedVulnerability === id) {
      setExpandedVulnerability(null)
    } else {
      setExpandedVulnerability(id)
    }
  }

  const patchVulnerability = (id: number) => {
    toast({
      title: "Patching initiated",
      description: "The system will download and apply the necessary patches.",
    })
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="font-medium">Vulnerability Scanner</h3>
              <p className="text-sm text-muted-foreground">Scan your system for known vulnerabilities</p>
            </div>
            <Button onClick={startScan} disabled={scanning}>
              {scanning ? (
                <>
                  <span className="mr-2">Scanning...</span>
                  <span className="animate-spin">‚è≥</span>
                </>
              ) : (
                <>
                  <Play className="mr-2 h-4 w-4" />
                  Start Scan
                </>
              )}
            </Button>
          </div>

          {scanning && (
            <div className="space-y-2 mb-4">
              <div className="flex items-center justify-between text-sm">
                <span>Scanning system components...</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4 flex flex-col items-center justify-center text-center">
                <ShieldAlert className="h-8 w-8 text-red-500 mb-2" />
                <div className="text-2xl font-bold">2</div>
                <div className="text-sm text-muted-foreground">Critical Vulnerabilities</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 flex flex-col items-center justify-center text-center">
                <AlertTriangle className="h-8 w-8 text-orange-500 mb-2" />
                <div className="text-2xl font-bold">3</div>
                <div className="text-sm text-muted-foreground">High Vulnerabilities</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 flex flex-col items-center justify-center text-center">
                <CheckCircle className="h-8 w-8 text-green-500 mb-2" />
                <div className="text-2xl font-bold">2</div>
                <div className="text-sm text-muted-foreground">Patched Vulnerabilities</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 flex flex-col items-center justify-center text-center">
                <XCircle className="h-8 w-8 text-red-500 mb-2" />
                <div className="text-2xl font-bold">3</div>

                <div className="text-sm text-muted-foreground">Unpatched Vulnerabilities</div>
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>

      <div className="border rounded-md">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>CVE ID</TableHead>
              <TableHead>Component</TableHead>
              <TableHead>Severity</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {vulnerabilities.map((vulnerability) => (
              <>
                <TableRow
                  key={vulnerability.id}
                  className="cursor-pointer"
                  onClick={() => toggleExpand(vulnerability.id)}
                >
                  <TableCell className="font-medium">{vulnerability.name}</TableCell>
                  <TableCell>{vulnerability.component}</TableCell>
                  <TableCell>
                    <Badge
                      variant="outline"
                      className={severityColors[vulnerability.severity as keyof typeof severityColors]}
                    >
                      {vulnerability.severity}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge
                      variant="outline"
                      className={statusColors[vulnerability.status as keyof typeof statusColors]}
                    >
                      {vulnerability.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {vulnerability.status === "unpatched" ? (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation()
                          patchVulnerability(vulnerability.id)
                        }}
                      >
                        Patch
                      </Button>
                    ) : (
                      <Button variant="outline" size="sm" disabled>
                        Patched
                      </Button>
                    )}
                  </TableCell>
                </TableRow>
                {expandedVulnerability === vulnerability.id && (
                  <TableRow>
                    <TableCell colSpan={5} className="bg-muted/30">
                      <div className="p-2 space-y-2">
                        <div>
                          <span className="font-medium">Description: </span>
                          <span>{vulnerability.description}</span>
                        </div>
                        <div>
                          <span className="font-medium">Remediation: </span>
                          <span>{vulnerability.remediation}</span>
                        </div>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}
